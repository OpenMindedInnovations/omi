.filters
  - sort_params = params[:sort] || ''
  - tag_params = params[:tags] || ''
  - sort_links = ['most-favorited', 'least-favorited', 'oldest', 'newest']
  - tag_links = Project.ordered_tags
  - status_links = Project.status_list
  - sort_links = sort_links + status_links
  - filter_params = tag_params.present? ? { tags: tag_params } : {}
  - tag_params = tag_params.downcase.split
  .row
    .col-xs-12
      h4
        b Tags
      - tag_links.each do |tag|
        - if tag_params.include?(tag)
          - state = tag_params - [tag]
          - state_params = state.count >= 1 ? { tags: (state.join(' ')) } : {}
          = link_to "#{parse_name(tag)}", projects_path(state_params), { class: 'btn btn-success' }
        - else
          - state = tag_params + [tag]
          - state_params = { tags: state.join(' ') }
          = link_to "#{parse_name(tag)}", projects_path(state_params), { class: 'btn btn-default' }
  .row
    .col-xs-12
      h4
        b Sorting
      - if sort_params.present?
        - sort_links.each do |sort|
          - if sort_params == sort
            = link_to "#{parse_name(sort)}", projects_path(filter_params), { class: 'btn btn-success' }
          - else
            = link_to "#{parse_name(sort)}", projects_path(filter_params.merge(sort: "#{sort}")), { class: 'btn btn-default' }
      - else
        - sort_links.each do |sort|
          = link_to "#{parse_name(sort)}", projects_path(filter_params.merge(sort: "#{sort}")), { class: 'btn btn-default' }